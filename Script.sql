--Authors: xhuska03, vut237464
DROP TABLE CHOROBA CASCADE CONSTRAINTS;
DROP TABLE ZVIERA CASCADE CONSTRAINTS;
DROP TABLE ABSOLVOVANA_PREHLIADKA CASCADE CONSTRAINTS;
DROP TABLE OCKOVANIE_PROTI CASCADE CONSTRAINTS;
DROP TABLE CISELNIK_OBCI CASCADE CONSTRAINTS;
DROP TABLE OSOBA CASCADE CONSTRAINTS;
DROP TABLE Veterinar CASCADE CONSTRAINTS;

--rozne typy chorob, rozne kody
CREATE TABLE Choroba (
    kod_choroby VARCHAR2(5) NOT NULL,
    nazov_choroby_v_eng VARCHAR2(100) NOT NULL,
    nazov_choroby_v_cz VARCHAR2(100) NOT NULL,
    PRIMARY KEY (kod_choroby)
);


CREATE TABLE Ciselnik_obci(
	psc VARCHAR2(10) NOT NULL,
	nazov VARCHAR2(20) NOT NULL,
	typ_obce VARCHAR2(20) NOT NULL,
	telefon VARCHAR2(20) NOT NULL,
	email VARCHAR2(20) NOT NULL,
	PRIMARY KEY (psc)
	
);


-- osoba nemusi byt veterinar ale musi byvat v obci
-- kontrola validneho emailu
CREATE TABLE Osoba (
  email VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(email, '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')),
  meno VARCHAR2(20) NOT NULL,
  priezvisko VARCHAR2(20) NOT NULL,
  telefon VARCHAR2(20) NOT NULL,
  ulica VARCHAR2(20) NOT NULL,
  popisne_cislo VARCHAR2(20) NOT NULL,
  obec_psc VARCHAR2(10) NOT NULL,
  PRIMARY KEY (email),
  FOREIGN KEY (obec_psc) REFERENCES Ciselnik_obci(psc) ON DELETE SET NULL
);


-- kazdy veterinar musi byt osoba
-- email sluzi ako fk ktory spojuje s osobou, toto realizuje vztah generalizacie
CREATE TABLE Veterinar (
	email VARCHAR2(50) NOT NULL CHECK (REGEXP_LIKE(email, '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')),
	PRIMARY KEY (email),
	registracne_cislo NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	nazov_ordinacie VARCHAR2(100) NOT NULL,
	FOREIGN KEY (email) REFERENCES Osoba(email)

);

-- zviera ma prave jedneho majitela, osobu
CREATE TABLE Zviera (
	chip_id VARCHAR2(20) NOT NULL,
	meno VARCHAR2(20) NOT NULL,
	pohlavie VARCHAR2(20) NOT NULL,
	datum_narodenia DATE NOT NULL,
	typ_chipu VARCHAR2(20) NOT NULL,
	vyrobca_chipu VARCHAR2(20) NOT NULL,
	datum_ocipovania DATE NOT NULL,
	druh_zvierata VARCHAR2(20) NOT NULL,
	plemeno VARCHAR2(20) NOT NULL,
	email_majitela VARCHAR2(50) NOT NULL,
	FOREIGN KEY (email_majitela) REFERENCES Osoba(email),
	PRIMARY KEY (chip_id)
	
);

-- prehliadku vykonal veterinar a na zviera priviezol jej majitel
CREATE TABLE Absolvovana_prehliadka (
    poradove_cislo NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    popis_ošetrenia VARCHAR2(255) NOT NULL,
    zviera_cip_id VARCHAR2(20) NOT NULL,
    datum_a_cas DATE  NOT NULL,
    email_majitela VARCHAR2(50) NOT NULL,
    email_veterinara VARCHAR2(50) NOT NULL,
    FOREIGN KEY (email_veterinara) REFERENCES Veterinar(email),
    FOREIGN KEY (email_majitela) REFERENCES Osoba(email),
    PRIMARY KEY (poradove_cislo),
    FOREIGN KEY (zviera_cip_id) REFERENCES Zviera(chip_id)
);

-- spojovacia tabulka pre m:n vazbu prehliadky a choroby, na roznej prehliadke sa zviera zaockuje proti roznej chorobe
CREATE TABLE Ockovanie_proti (
    kod_choroby VARCHAR2(20) NOT NULL,
    poradove_cislo NUMBER NOT NULL,
    FOREIGN KEY (kod_choroby) REFERENCES Choroba(kod_choroby),
    FOREIGN KEY (poradove_cislo) REFERENCES Absolvovana_prehliadka(poradove_cislo),
    PRIMARY KEY (kod_choroby, poradove_cislo)
);

-- Kontroluj prefix choroby
CREATE OR REPLACE TRIGGER check_choroba_kod_prefix
BEFORE INSERT OR UPDATE ON Choroba
FOR EACH ROW
DECLARE
    prefix VARCHAR2(2) := 'CH';
BEGIN
    IF SUBSTR(:NEW.kod_choroby, 1, 2) <> prefix THEN
        RAISE_APPLICATION_ERROR(-20003, 'Kód choroby musí začínat s "CH".');
    END IF;
END;

-- Kontroluje typ zvieraťa
CREATE OR REPLACE TRIGGER check_chobotnica
BEFORE INSERT OR UPDATE ON Zviera
FOR EACH ROW
DECLARE
    chobotnica_typ VARCHAR2(20) := 'Chobotnica'; -- Typ chobotnice
BEGIN
    IF :NEW.druh_zvierata = chobotnica_typ THEN
        RAISE_APPLICATION_ERROR(-20001, 'Typ zvieraťa nemôže byť chobotnica.');
    END IF;
END;

-- Kontroluje počet prehliadok
CREATE OR REPLACE TRIGGER kontrola_pocetu_prehliadok
BEFORE INSERT OR UPDATE ON Absolvovana_prehliadka
FOR EACH ROW
DECLARE
    max_pocet_prehliadok INTEGER := 2; -- Maximální povolený počet prehliadok
    pocet_prehliadok INTEGER;
BEGIN
    SELECT COUNT(*) INTO pocet_prehliadok
    FROM Absolvovana_prehliadka
    WHERE zviera_cip_id = :NEW.zviera_cip_id;

    IF pocet_prehliadok >= max_pocet_prehliadok THEN
        RAISE_APPLICATION_ERROR(-20002, 'Překročený maximálný počet absolvovaných prehliadok pro toto zviera.');
    END IF;
END;

-- Choroby
INSERT INTO Choroba (kod_choroby, nazov_choroby_v_eng, nazov_choroby_v_cz) VALUES ('CH002', 'Feline Leukemia', 'Kočičí leukémie');
INSERT INTO Choroba (kod_choroby, nazov_choroby_v_eng, nazov_choroby_v_cz) VALUES ('CH003', 'Rabies', 'Vzteklina');
INSERT INTO Choroba (kod_choroby, nazov_choroby_v_eng, nazov_choroby_v_cz) VALUES ('CH004', 'Canine Distemper', 'Psinka');
INSERT INTO Choroba (kod_choroby, nazov_choroby_v_eng, nazov_choroby_v_cz) VALUES ('CH005', 'Lyme Disease', 'Lymeská borelióza');
INSERT INTO Choroba (kod_choroby, nazov_choroby_v_eng, nazov_choroby_v_cz) VALUES ('CH006', 'Feline Immunodeficiency Virus', 'Kočičí imunodeficienční virus');
INSERT INTO Choroba (kod_choroby, nazov_choroby_v_eng, nazov_choroby_v_cz) VALUES ('CH007', 'Heartworm', 'Srdcovka');
INSERT INTO Choroba (kod_choroby, nazov_choroby_v_eng, nazov_choroby_v_cz) VALUES ('CH008', 'Parvovirus', 'Parvoviróza');

-- Testovacie dáta na kontrolu prefixu kódu choroby (trigger)
-- INSERT INTO Choroba (kod_choroby, nazov_choroby_v_eng, nazov_choroby_v_cz) VALUES ('CI008', 'Parvovirus', 'Parvoviróza');

-- Obce
INSERT INTO Ciselnik_obci (psc, nazov, typ_obce, telefon, email) VALUES ('23456', 'Brno', 'Město', '234567890', 'info@brno.cz');
INSERT INTO Ciselnik_obci (psc, nazov, typ_obce, telefon, email) VALUES ('34567', 'Ostrava', 'Město', '345678901', 'info@ostrava.cz');
INSERT INTO Ciselnik_obci (psc, nazov, typ_obce, telefon, email) VALUES ('45678', 'Praha', 'Město', '456789012', 'info@praha.cz');
INSERT INTO Ciselnik_obci (psc, nazov, typ_obce, telefon, email) VALUES ('56789', 'Plzeň', 'Město', '567890123', 'info@plzen.cz');
INSERT INTO Ciselnik_obci (psc, nazov, typ_obce, telefon, email) VALUES ('67890', 'Liberec', 'Město', '678901234', 'info@liberec.cz');
INSERT INTO Ciselnik_obci (psc, nazov, typ_obce, telefon, email) VALUES ('78901', 'České Budějovice', 'Město', '789012345', 'info@cbudejovice.cz');
INSERT INTO Ciselnik_obci (psc, nazov, typ_obce, telefon, email) VALUES ('89012', 'Hradec Králové', 'Město', '890123456', 'info@hk.cz');

-- Osoby
INSERT INTO Osoba (email, meno, priezvisko, telefon, ulica, popisne_cislo, obec_psc) VALUES ('maria.silna@example.com', 'Maria', 'Silná', '876543210', 'Nějaká Jiná Ulice', '20', '23456');
INSERT INTO Osoba (email, meno, priezvisko, telefon, ulica, popisne_cislo, obec_psc) VALUES ('lukas.maly@example.com', 'Lukáš', 'Malý', '765432109', 'Třetí Ulice', '30', '34567');
INSERT INTO Osoba (email, meno, priezvisko, telefon, ulica, popisne_cislo, obec_psc) VALUES ('jana.vzorna@example.com', 'Jana', 'Vzorná', '987654321', 'Pátá Ulice', '50', '45678');
INSERT INTO Osoba (email, meno, priezvisko, telefon, ulica, popisne_cislo, obec_psc) VALUES ('petr.novak@example.com', 'Petr', 'Novák', '876543219', 'Šestá Ulice', '60', '56789');
INSERT INTO Osoba (email, meno, priezvisko, telefon, ulica, popisne_cislo, obec_psc) VALUES ('eva.modra@example.com', 'Eva', 'Modrá', '765432198', 'Sedmá Ulice', '70', '67890');
INSERT INTO Osoba (email, meno, priezvisko, telefon, ulica, popisne_cislo, obec_psc) VALUES ('david.stary@example.com', 'David', 'Starý', '654321987', 'Osmá Ulice', '80', '78901');
INSERT INTO Osoba (email, meno, priezvisko, telefon, ulica, popisne_cislo, obec_psc) VALUES ('anna.zelena@example.com', 'Anna', 'Zelená', '543219876', 'Devátá Ulice', '90', '89012');

-- Veterinar
INSERT INTO Veterinar (email, registracne_cislo, nazov_ordinacie) VALUES ('lukas.maly@example.com', 3, 'Veterinární klinika Ostrava');
INSERT INTO Veterinar (email, registracne_cislo, nazov_ordinacie) VALUES ('petr.novak@example.com', 4, 'Veterinární klinika Praha');
INSERT INTO Veterinar (email, registracne_cislo, nazov_ordinacie) VALUES ('eva.modra@example.com', 5, 'Zvířecí klinika Liberec');
INSERT INTO Veterinar (email, registracne_cislo, nazov_ordinacie) VALUES ('maria.silna@example.com', 5, 'Zvířecí klinika Liberec');

-- Zvierata
INSERT INTO Zviera (chip_id, meno, pohlavie, datum_narodenia, typ_chipu, vyrobca_chipu, datum_ocipovania, druh_zvierata, plemeno, email_majitela) VALUES ('CHIP002', 'Micka', 'Samice', TO_DATE('2017-03-15', 'YYYY-MM-DD'), 'Advanced', 'ChipBest', TO_DATE('2017-04-15', 'YYYY-MM-DD'), 'Kočka', 'Sphynx', 'maria.silna@example.com');
INSERT INTO Zviera (chip_id, meno, pohlavie, datum_narodenia, typ_chipu, vyrobca_chipu, datum_ocipovania, druh_zvierata, plemeno, email_majitela) VALUES ('CHIP003', 'Fido', 'Samec', TO_DATE('2018-05-25', 'YYYY-MM-DD'), 'Nano', 'ChipTech', TO_DATE('2018-06-25', 'YYYY-MM-DD'), 'Pes', 'Beagle', 'lukas.maly@example.com');
INSERT INTO Zviera (chip_id, meno, pohlavie, datum_narodenia, typ_chipu, vyrobca_chipu, datum_ocipovania, druh_zvierata, plemeno, email_majitela) VALUES ('CHIP004', 'Lassie', 'Samice', TO_DATE('2019-06-10', 'YYYY-MM-DD'), 'Standard', 'ChipPro', TO_DATE('2019-07-10', 'YYYY-MM-DD'), 'Pes', 'Kolík', 'jana.vzorna@example.com');
INSERT INTO Zviera (chip_id, meno, pohlavie, datum_narodenia, typ_chipu, vyrobca_chipu, datum_ocipovania, druh_zvierata, plemeno, email_majitela) VALUES ('CHIP005', 'Garfield', 'Samec', TO_DATE('2020-02-14', 'YYYY-MM-DD'), 'Micro', 'ChipUltra', TO_DATE('2020-03-14', 'YYYY-MM-DD'), 'Kočka', 'Perská', 'petr.novak@example.com');

-- Testovacie dáta na vyvolanie triggeru v prípade že druh zvieraťa je chobotnica
-- INSERT INTO Zviera (chip_id, meno, pohlavie, datum_narodenia, typ_chipu, vyrobca_chipu, datum_ocipovania, druh_zvierata, plemeno, email_majitela) VALUES ('CHIP005', 'Garfield', 'Samec', TO_DATE('2020-02-14', 'YYYY-MM-DD'), 'Micro', 'ChipUltra', TO_DATE('2020-03-14', 'YYYY-MM-DD'), 'Chobotnica', 'Perská', 'petr.novak@example.com');

-- Absolvované prehliadky
INSERT INTO Absolvovana_prehliadka (popis_ošetrenia, zviera_cip_id, datum_a_cas, email_majitela, email_veterinara) VALUES ('Pravidelná vakcinace', 'CHIP002', TO_DATE('2021-09-15 14:30', 'YYYY-MM-DD HH24:MI'), 'maria.silna@example.com', 'lukas.maly@example.com');
INSERT INTO Absolvovana_prehliadka (popis_ošetrenia, zviera_cip_id, datum_a_cas, email_majitela, email_veterinara) VALUES ('Dermatologická kontrola', 'CHIP003', TO_DATE('2021-10-22 09:45', 'YYYY-MM-DD HH24:MI'), 'maria.silna@example.com', 'lukas.maly@example.com');
INSERT INTO Absolvovana_prehliadka (popis_ošetrenia, zviera_cip_id, datum_a_cas, email_majitela, email_veterinara) VALUES ('Očkování proti psince', 'CHIP004', TO_DATE('2022-05-20 10:00', 'YYYY-MM-DD HH24:MI'), 'jana.vzorna@example.com', 'petr.novak@example.com');
INSERT INTO Absolvovana_prehliadka (popis_ošetrenia, zviera_cip_id, datum_a_cas, email_majitela, email_veterinara) VALUES ('Kontrola zubů', 'CHIP005', TO_DATE('2022-06-15 11:30', 'YYYY-MM-DD HH24:MI'), 'petr.novak@example.com', 'eva.modra@example.com');
INSERT INTO Absolvovana_prehliadka (popis_ošetrenia, zviera_cip_id, datum_a_cas, email_majitela, email_veterinara) VALUES ('Kontrola zubů', 'CHIP005', TO_DATE('2022-06-16 11:30', 'YYYY-MM-DD HH24:MI'), 'petr.novak@example.com', 'eva.modra@example.com');

-- Testovacie dáta na kontrou počtu prehliadok na spustenie trigeru
-- INSERT INTO Absolvovana_prehliadka (popis_ošetrenia, zviera_cip_id, datum_a_cas, email_majitela, email_veterinara) VALUES ('Kontrola zubů', 'CHIP005', TO_DATE('2022-06-16 11:30', 'YYYY-MM-DD HH24:MI'), 'petr.novak@example.com', 'eva.modra@example.com');

-- Očkovanie
INSERT INTO Ockovanie_proti (kod_choroby, poradove_cislo) VALUES ('CH002', 1);
INSERT INTO Ockovanie_proti (kod_choroby, poradove_cislo) VALUES ('CH003', 2);
INSERT INTO Ockovanie_proti (kod_choroby, poradove_cislo) VALUES ('CH004', 3);
INSERT INTO Ockovanie_proti (kod_choroby, poradove_cislo) VALUES ('CH005', 4);

-- Select 1: Najsť všetky zvierata a ich majitelov
-- Spojenie tabulky osoby.
SELECT Z.meno AS Zviera, O.meno || ' ' || O.priezvisko AS Majitel
FROM Zviera Z
JOIN Osoba O ON Z.email_majitela = O.email;

-- Select 2: Najsť všetkych veterinarov a ich ordiancie v obci 'Brno'
-- Spojenie tabulky Veterinar, Osoba a Ciselnik_obci.
SELECT V.nazov_ordinacie, O.meno || ' ' || O.priezvisko AS Veterinar
FROM Veterinar V
JOIN Osoba O ON V.email = O.email
JOIN Ciselnik_obci C ON O.obec_psc = C.psc
WHERE C.nazov = 'Brno';

-- Select 3: Počet zvierat podľa plemena
-- Používa GROUP BY a agregačnú funkciu COUNT().
SELECT druh_zvierata, plemeno, COUNT(*) AS Pocet
FROM Zviera
GROUP BY druh_zvierata, plemeno;

-- Select 4: Počet zvierat očkovaných proti každej chorobe
-- Tento select spojuje tabulky Ockovanie_proti a Choroba.
SELECT C.nazov_choroby_v_cz, COUNT(*) AS Pocet_zvierat
FROM Ockovanie_proti O
JOIN Choroba C ON O.kod_choroby = C.kod_choroby
GROUP BY C.nazov_choroby_v_cz;

-- Select 5: Zvieratá, ktoré boli očkované proti chorobe 'Rabies'
-- Používá EXISTS k overeniu, či existuje záznam v tabulke Ockovanie_proti a Choroba.
SELECT Z.meno
FROM Zviera Z
WHERE EXISTS (
  SELECT 1
  FROM Ockovanie_proti O
  JOIN Choroba C ON O.kod_choroby = C.kod_choroby
  WHERE C.nazov_choroby_v_eng = 'Rabies'
);
--
-- Select 6: Veterinai ktori vykonali prehliadku na zvierati 'Micka'
-- Používá IN s vnorenym selectorom.
SELECT O.meno || ' ' || O.priezvisko AS Veterinar
FROM Osoba O
WHERE O.email IN (
  SELECT A.email_veterinara
  FROM Absolvovana_prehliadka A
  JOIN Zviera Z ON A.zviera_cip_id = Z.chip_id
  WHERE Z.meno = 'Micka'
);

-- Select 7: Zvierata ktore navstivili veterinara viacej krat ako jeden
-- Používá GROUP BY a HAVING k filtrování skupín.
SELECT Z.meno, COUNT(A.poradove_cislo) AS Pocet_navstev
FROM Absolvovana_prehliadka A
JOIN Zviera Z ON A.zviera_cip_id = Z.chip_id
GROUP BY Z.meno
HAVING COUNT(A.poradove_cislo) > 1;

-- Select 8: Veterinári, ktorí vykonali prehliadku na zvierati staršom ako rok
-- Tento príkaz používa poddotaz a porovnáva dátum narodenia zvieraťa s aktuálnym dátumom.
SELECT DISTINCT O.meno || ' ' || O.priezvisko AS Veterinar
FROM Veterinar V
JOIN Osoba O ON V.email = O.email
JOIN Absolvovana_prehliadka A ON V.email = A.email_veterinara
JOIN Zviera Z ON A.zviera_cip_id = Z.chip_id
WHERE Z.datum_narodenia < SYSDATE - INTERVAL '1' YEAR;

-- Táto procedúra obsahuje následné kroky, nefunguje z dôvodu Dbeaver ?
-- UpdatePersonContactInfo, je navrhnutá na aktualizáciu telefónneho čísla osoby v databáze, 
-- pričom ako vstupné parametre používa email osoby (p_email) a nové telefónne číslo (p_new_phone)
CREATE OR REPLACE PROCEDURE UpdatePersonContactInfo (
    p_email IN Osoba.email%TYPE,
    p_new_phone IN Osoba.telefon%TYPE
)
AS
    -- Deklarujeme premennú, ktorá odkazuje na celý riadok tabuľky Osoba
    v_person Osoba%ROWTYPE;
BEGIN
    -- Načítanie údajov o osobe do premennej v_person
    SELECT *
    INTO v_person
    FROM Osoba
    WHERE email = p_email;
    
    -- Kontrola, či je nové telefónne číslo iné ako súčasné
    IF v_person.telefon = p_new_phone THEN
        RAISE_APPLICATION_ERROR(-20003, 'Nové telefónne číslo je rovnaké ako pôvodné.');
    END IF;

    -- Aktualizácia telefónneho čísla pre osobu so zadaným e-mailom
    UPDATE Osoba
    SET telefon = p_new_phone
    WHERE email = p_email;
    
    -- Kontrola, či bola aktualizácia úspešná
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Žiadna zmena nevykonaná: osoba s takýmto e-mailom neexistuje.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Telefónne číslo bolo úspešne aktualizované pre ' || p_email);
    END IF;
    
    -- Potvrdenie zmien
    COMMIT;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Osoba s uvedeným e-mailom neexistuje v databáze.');
    WHEN OTHERS THEN
        -- Rollback v prípade inej chyby
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20004, 'Došlo k neočakávanej chybe pri aktualizácii: ' || SQLERRM);
END;

-- Táto procedúra slúží pre zobrazenie informácií o zvierati, ktoré patrí danému majiteľovi
-- Zobrazi hlavičku a následné atribúty zvieraťa, ktoré získá iterovaním cez kurzor c_pet_info
-- Ako paramater berie email majiteľa
CREATE OR REPLACE PROCEDURE PrintPetInfoForOwner(p_email IN VARCHAR2) AUTHID CURRENT_USER AS
-- Create a cursor to store the result of the query
CURSOR c_pet_info IS
SELECT Z.meno AS Zviera, Z.pohlavie, Z.datum_narodenia, Z.typ_chipu, Z.vyrobca_chipu, Z.datum_ocipovania, Z.druh_zvierata, Z.plemeno
FROM Zviera Z
WHERE Z.email_majitela = p_email;
BEGIN
DBMS_OUTPUT.PUT_LINE('Zviera | Pohlavie | Datum narodenia | Typ chipu | Vyrobca chipu | Datum ocipovania | Druh zvierata | Plemeno');
-- Loop through the cursor and print the results
FOR pet_info IN c_pet_info LOOP
DBMS_OUTPUT.PUT_LINE(pet_info.Zviera || ' | ' || pet_info.pohlavie || ' | ' || pet_info.datum_narodenia || ' | ' || pet_info.typ_chipu || ' | ' || pet_info.vyrobca_chipu || ' | ' || pet_info.datum_ocipovania || ' | ' || pet_info.druh_zvierata || ' | ' || pet_info.plemeno);
END LOOP;

END;

-- Sputenie procedúr
BEGIN 
	UpdatePersonContactInfo('petr.novak@example.com', '567890531');
	PrintPetInfoForOwner('petr.novak@example.com');
END;

-- EXPLAIN PLAN pro daný dotaz
-- Výpis plánu vykonania vysvetľuje, že prebieha spojenie tabuliek pomocou stĺpca kod_choroby, ktorý je kľúčom pre spojenie. 
-- Ďalej ukazuje, že je použitá agregačná funkcia COUNT(*) na počet zvierat a tieto sú zoskupené podľa názvu choroby. 
EXPLAIN PLAN FOR
SELECT C.nazov_choroby_v_cz, COUNT(*) AS Pocet_zvierat
FROM Ockovanie_proti O
JOIN Choroba C ON O.kod_choroby = C.kod_choroby
GROUP BY C.nazov_choroby_v_cz;

-- Zobrazenie plánu prevedenia dotazu
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- Plán vykonania dotazu pred vytvorením indexu
EXPLAIN PLAN FOR
SELECT *
FROM Osoba o
JOIN Ciselnik_obci c ON o.obec_psc = c.psc;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- Popis využití indexu v dotazu
-- Index idx_obec_psc umožňuje rychlejšie prepojenie medzi tabulkami Osoba a Ciselnik_obci na základe stlpcu obec_psc. 
CREATE INDEX idx_obec_psc ON Osoba(obec_psc);

-- Plán vykonania dotazu po vytvorení indexu
EXPLAIN PLAN FOR
SELECT *
FROM Osoba o
JOIN Ciselnik_obci c ON o.obec_psc = c.psc;

-- Zobrazenie plánu prevedenia dotazu s indexom
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- Definuje CTE s názvom Sumarizace
WITH Sumarizace AS (
-- Výber potrebných stĺpcov z tabuľky Zviera a počet prehliadok z tabuľky Absolvovana_prehliadka
    SELECT
        Zviera.meno,
        CASE
            WHEN Zviera.pohlavie = 'Samec' THEN 'Kocour' 
            WHEN Zviera.pohlavie = 'Samice' THEN 'Kočka'
            ELSE 'Neznámé'
        END AS Pohlavie,
        COUNT(Absolvovana_prehliadka.poradove_cislo) AS Pocet_prehliadok
    FROM Zviera
    -- Spojenie tabuľky Zviera s tabuľkou Absolvovana_prehliadka pre získanie prehliadok každého zvieraťa
    LEFT JOIN Absolvovana_prehliadka ON Zviera.chip_id = Absolvovana_prehliadka.zviera_cip_id
    -- Zoskupenie podľa mena a pohlavia zvieraťa pre správne zhrnutie počtu prehliadok
    GROUP BY Zviera.meno, Zviera.pohlavie
)
SELECT * FROM Sumarizace;

-- Udelenie oprávnenia pre druhého člena týmu
GRANT ALL PRIVILEGES ON CHOROBA TO vut237464;
GRANT ALL PRIVILEGES ON ZVIERA TO vut237464;
GRANT ALL PRIVILEGES ON ABSOLVOVANA_PREHLIADKA TO vut237464;
GRANT ALL PRIVILEGES ON OCKOVANIE_PROTI TO vut237464;
GRANT ALL PRIVILEGES ON CISELNIK_OBCI TO vut237464;
GRANT ALL PRIVILEGES ON OSOBA TO vut237464;
GRANT ALL PRIVILEGES ON Veterinar TO vut237464;


-- V prípade už vytvoreného materialized view, tak ho odstránime aby nedošlo ku konfliktu
BEGIN
   EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW vut237464.vet_vaccination_summary';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -12003 THEN
         RAISE;
      END IF;
END;

-- Materializovaný pohľad, ktorý zobrazuje počet očkovaní proti každej chorobe, ktoré vykonal každý veterinár.
CREATE MATERIALIZED VIEW vut237464.vet_vaccination_summary
REFRESH COMPLETE ON DEMAND
WITH PRIMARY KEY
AS
SELECT v.registracne_cislo, v.nazov_ordinacie, c.nazov_choroby_v_cz, COUNT(*) AS pocet_ockovani
FROM Veterinar v
JOIN Absolvovana_prehliadka a ON v.email = a.email_veterinara
JOIN Ockovanie_proti o ON a.poradove_cislo = o.poradove_cislo
JOIN Choroba c ON o.kod_choroby = c.kod_choroby
GROUP BY v.registracne_cislo, v.nazov_ordinacie, c.nazov_choroby_v_cz;

-- Zobraziť počet očkovaní proti 'Rabies' vykonaných vo Veterinárnej klinike Ostrava
SELECT pocet_ockovani
FROM vut237464.vet_vaccination_summary
WHERE nazov_choroby_v_cz = 'Vzteklina' AND nazov_ordinacie = 'Veterinární klinika Ostrava';
